{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the sum-modem documentation This documentation covers SubSeaPulse's Subsea Modem (SuM) project, a low-cost, software-defined underwater acoustic modem tailored for research and industrial applications. This innovative modem can function either as a low-power acoustic modem, employing some robust modulation and coding scheme, or as an analog front-end for testing your acoustic signals in accordance with the JANUS NATO standard. Index Please refer to the different sections of this guide: Overview introduces modem-to-modem communication strategies and user-to-modem interfacing. Quick start contains the steps to get the modem up and running. Usage contains information about the software to operate the modem. Troubleshooting contains information to help you get your modems back up and running. Home - this page: index and credits. Additional documents SuM Hardware Manual for detailed information about the SuM's hardware including technical specifications of its interfaces and power supply. Credits SubSeaPulse Srl","title":"Home"},{"location":"#welcome-to-the-sum-modem-documentation","text":"This documentation covers SubSeaPulse's Subsea Modem (SuM) project, a low-cost, software-defined underwater acoustic modem tailored for research and industrial applications. This innovative modem can function either as a low-power acoustic modem, employing some robust modulation and coding scheme, or as an analog front-end for testing your acoustic signals in accordance with the JANUS NATO standard.","title":"Welcome to the sum-modem documentation"},{"location":"#index","text":"Please refer to the different sections of this guide: Overview introduces modem-to-modem communication strategies and user-to-modem interfacing. Quick start contains the steps to get the modem up and running. Usage contains information about the software to operate the modem. Troubleshooting contains information to help you get your modems back up and running. Home - this page: index and credits.","title":"Index"},{"location":"#additional-documents","text":"SuM Hardware Manual for detailed information about the SuM's hardware including technical specifications of its interfaces and power supply.","title":"Additional documents"},{"location":"#credits","text":"SubSeaPulse Srl","title":"Credits"},{"location":"help/","text":"Troubleshooting Below are reported some common problems and some diagnostic techniques that may help you get your modems back up and running. This page will be updated as relevant usage difficulties arise among users. Common problems The modems are correctly set up and powered on. Transmission happens (green lights turns red on the SuM board) but no data is received on the other device. A common cause for this problem is misconfiguration of the id parameter inside the modem's startmodem.sh script. The value assigned to id is included in all sent messages: the default behavior for the modems is to reject incoming messages showing an id equal to their own. This behavior is needed to avoid message loopback. Consequently, all modems must have a distinct id value for correct operation. Another common cause that may hinder communication in underwater test setups is echo: the problem is particularly relevant when the hydrophones are placed close to each other and/or confined in a small water volume. Try changing the gain value inside startmodem.sh trying also lower values down to 0.01. Troubleshooting utilities The modem's software is designed to log a number of operations that happen both during modulation and demodulation. That information is saved inside the system journal: a real-time view of the incoming journal messages is given by journalctl -f . Make sure to have startmodem.sh also running, either in background or in another shell.","title":"Troubleshooting"},{"location":"help/#troubleshooting","text":"Below are reported some common problems and some diagnostic techniques that may help you get your modems back up and running. This page will be updated as relevant usage difficulties arise among users.","title":"Troubleshooting"},{"location":"help/#common-problems","text":"The modems are correctly set up and powered on. Transmission happens (green lights turns red on the SuM board) but no data is received on the other device. A common cause for this problem is misconfiguration of the id parameter inside the modem's startmodem.sh script. The value assigned to id is included in all sent messages: the default behavior for the modems is to reject incoming messages showing an id equal to their own. This behavior is needed to avoid message loopback. Consequently, all modems must have a distinct id value for correct operation. Another common cause that may hinder communication in underwater test setups is echo: the problem is particularly relevant when the hydrophones are placed close to each other and/or confined in a small water volume. Try changing the gain value inside startmodem.sh trying also lower values down to 0.01.","title":"Common problems"},{"location":"help/#troubleshooting-utilities","text":"The modem's software is designed to log a number of operations that happen both during modulation and demodulation. That information is saved inside the system journal: a real-time view of the incoming journal messages is given by journalctl -f . Make sure to have startmodem.sh also running, either in background or in another shell.","title":"Troubleshooting utilities"},{"location":"overview/","text":"Overview Introduction The Subsea Modem (SuM) is a project by SubSeaPulse Srl . It is a low cost, made in Italy, software-defined acoustic modem specifically tailored for underwater telecommunications. The device provides a series of robust modulations and coding schemes to optimise usage for any application, both research and industrial. Nonetheless it is suitable for low-power applications, allowing for battery-powered deployments. The SuM is composed of a Raspberry Pi board, an HiFi sound card and the SuM-HAT, the first Raspberry Pi HAT engineered to transform the Raspberry into an analog front-end to pilot underwater acoustic transducers with great performance. Operation principles The SuM is a complete device, ready to be coupled with a transducer to stard communicating in the underwater realm. The modem's software is designed to send and receive data through a TCP socket, so that it can be easily interfaced with any user-provided application. Communicating Upon receiving data from the user the modem will encode it into a modulated audio signal. This signal will be generated and amplified by the SuM's hardware in order to be then fed to the connected transducer. When not trasmitting, the modem will be listening for other signals captured by the transducer, ready to decode them and deliver their message to the user. The device is built as a Software-Defined Modem (SDM), meaning that much freedom is left to the user in setting parameters and choosing modulation and coding schemes. In particular, the SuM supports out-of-the-box the modulation techniques below. Modulation technique Type Flexframe Single-carrier/OFDM, various modulations JANUS Frequency-hopping, BFSK modulation Choosing single-carrier Flexframe allows the user to better specify what modulation and forward error correction scheme to use: below are listed the supported options. Type Available parameters Phase shift keying bpsk, qpsk, psk2, psk4, psk8, psk16, psk32, psk64, psk128, psk256 Differential phase shift keying dpsk2, dpsk4, dpsk8, dpsk16, dpsk32, dpsk64, dpsk128, dpsk256 Amplitude shift keying ask2, ask4, ask8, ask16, ask32, ask64, ask128, ask256 Quadrature amplitude qam4, qam8, qam16, qam32, qam64, qam128, qam256 Amplitude and phase shift keying apsk4, apsk8, apsk16, apsk32, apsk64, apsk128, apsk256 On-off keying ook full list Type Parameter Hamming (7,4) h74 Hamming (7,4) plus parity bit h84 Hamming (12,8) h128 Repeat x3 rep3 Repeat x5 rep5 SEC-DED (72,64) secded Convolutional K=7, df=10 cv27 Convolutional K=9, df=12 cv29 Convolutional K=9, df=18 cv39 Convolutional K=15, df<=57 cv615 Reed-Solomon m=8 rs","title":"Overview"},{"location":"overview/#overview","text":"","title":"Overview"},{"location":"overview/#introduction","text":"The Subsea Modem (SuM) is a project by SubSeaPulse Srl . It is a low cost, made in Italy, software-defined acoustic modem specifically tailored for underwater telecommunications. The device provides a series of robust modulations and coding schemes to optimise usage for any application, both research and industrial. Nonetheless it is suitable for low-power applications, allowing for battery-powered deployments. The SuM is composed of a Raspberry Pi board, an HiFi sound card and the SuM-HAT, the first Raspberry Pi HAT engineered to transform the Raspberry into an analog front-end to pilot underwater acoustic transducers with great performance.","title":"Introduction"},{"location":"overview/#operation-principles","text":"The SuM is a complete device, ready to be coupled with a transducer to stard communicating in the underwater realm. The modem's software is designed to send and receive data through a TCP socket, so that it can be easily interfaced with any user-provided application.","title":"Operation principles"},{"location":"overview/#communicating","text":"Upon receiving data from the user the modem will encode it into a modulated audio signal. This signal will be generated and amplified by the SuM's hardware in order to be then fed to the connected transducer. When not trasmitting, the modem will be listening for other signals captured by the transducer, ready to decode them and deliver their message to the user. The device is built as a Software-Defined Modem (SDM), meaning that much freedom is left to the user in setting parameters and choosing modulation and coding schemes. In particular, the SuM supports out-of-the-box the modulation techniques below. Modulation technique Type Flexframe Single-carrier/OFDM, various modulations JANUS Frequency-hopping, BFSK modulation Choosing single-carrier Flexframe allows the user to better specify what modulation and forward error correction scheme to use: below are listed the supported options. Type Available parameters Phase shift keying bpsk, qpsk, psk2, psk4, psk8, psk16, psk32, psk64, psk128, psk256 Differential phase shift keying dpsk2, dpsk4, dpsk8, dpsk16, dpsk32, dpsk64, dpsk128, dpsk256 Amplitude shift keying ask2, ask4, ask8, ask16, ask32, ask64, ask128, ask256 Quadrature amplitude qam4, qam8, qam16, qam32, qam64, qam128, qam256 Amplitude and phase shift keying apsk4, apsk8, apsk16, apsk32, apsk64, apsk128, apsk256 On-off keying ook full list Type Parameter Hamming (7,4) h74 Hamming (7,4) plus parity bit h84 Hamming (12,8) h128 Repeat x3 rep3 Repeat x5 rep5 SEC-DED (72,64) secded Convolutional K=7, df=10 cv27 Convolutional K=9, df=12 cv29 Convolutional K=9, df=18 cv39 Convolutional K=15, df<=57 cv615 Reed-Solomon m=8 rs","title":"Communicating"},{"location":"quickstart/","text":"Quick start 1. Required items In order to have a working setup you will need: The SuM device - included in your order. A 12V power supply or battery - NOT included in your order. A LAN cable (optional, but recommended) - NOT included in your order. An hydrophone with coaxial BNC connector (essential if you plan underwater use) - NOT included in your order. Further information about the power supply requirements (connector size, power rating) are included in the shipped, physical documentation that must be read before use. If not available, equivalent information can be found in the SuM Hardware Manual . Powering the system through the Raspberry Pi's USB interface is NOT supported, as it may cause the system to fail due to insufficient current draw. 2. Power up In order to carry out inital configuration, it is preferred to first turn on the modem connecting the power supply only, without peripherals. A green LED on the base board will signal power while a red, blinking LED signals I/O operativity. After some minutes, the SuM's bootstrap will be complete: you may proceed with the initial configuration. 3 Initial configuration Initial configuration mainly involves setting up the appropriate interface the user intends to communicate with the modem through. All methods require logging into the modem using the default user account credentials, reported below. username: sum password: sum After logging in, you may configure the interface of your choice. We recommend using sudo raspi-config for editing WiFi settings and sudo nmtui for editing ethernet settings. 3.1 Initial access via Ethernet (recommended) The modem will be shipped with a static Ethernet IP address, fixed at 192.168.3.100 . Connect it to a LAN using an Ethernet cable then connect via SSH using the default user credentials. 3.2 Initial access via screen and keyboard Connect a screen (using the HDMI port) and an USB keyboard to the modem. If nothing is shown on the screen, reboot the modem by unplugging and plugging back the power supply. Log in using default credentials. 3.3 Inital access via WiFi By default the modem will attempt connection to the sum_wlan WiFi network, providing sum_default as password. Once a WiFi connection with the same parameters is created, the modem will connect to it (it may take a couple of minutes). The modem will acquire an IP address via DHCP: connect via SSH using the default credentials. At this point, your device should be reachable through the desired interface. Now refer to the Usage section for normal operation.","title":"Quick start"},{"location":"quickstart/#quick-start","text":"","title":"Quick start"},{"location":"quickstart/#1-required-items","text":"In order to have a working setup you will need: The SuM device - included in your order. A 12V power supply or battery - NOT included in your order. A LAN cable (optional, but recommended) - NOT included in your order. An hydrophone with coaxial BNC connector (essential if you plan underwater use) - NOT included in your order. Further information about the power supply requirements (connector size, power rating) are included in the shipped, physical documentation that must be read before use. If not available, equivalent information can be found in the SuM Hardware Manual . Powering the system through the Raspberry Pi's USB interface is NOT supported, as it may cause the system to fail due to insufficient current draw.","title":"1. Required items"},{"location":"quickstart/#2-power-up","text":"In order to carry out inital configuration, it is preferred to first turn on the modem connecting the power supply only, without peripherals. A green LED on the base board will signal power while a red, blinking LED signals I/O operativity. After some minutes, the SuM's bootstrap will be complete: you may proceed with the initial configuration.","title":"2. Power up"},{"location":"quickstart/#3-initial-configuration","text":"Initial configuration mainly involves setting up the appropriate interface the user intends to communicate with the modem through. All methods require logging into the modem using the default user account credentials, reported below. username: sum password: sum After logging in, you may configure the interface of your choice. We recommend using sudo raspi-config for editing WiFi settings and sudo nmtui for editing ethernet settings.","title":"3 Initial configuration"},{"location":"quickstart/#31-initial-access-via-ethernet-recommended","text":"The modem will be shipped with a static Ethernet IP address, fixed at 192.168.3.100 . Connect it to a LAN using an Ethernet cable then connect via SSH using the default user credentials.","title":"3.1 Initial access via Ethernet (recommended)"},{"location":"quickstart/#32-initial-access-via-screen-and-keyboard","text":"Connect a screen (using the HDMI port) and an USB keyboard to the modem. If nothing is shown on the screen, reboot the modem by unplugging and plugging back the power supply. Log in using default credentials.","title":"3.2 Initial access via screen and keyboard"},{"location":"quickstart/#33-inital-access-via-wifi","text":"By default the modem will attempt connection to the sum_wlan WiFi network, providing sum_default as password. Once a WiFi connection with the same parameters is created, the modem will connect to it (it may take a couple of minutes). The modem will acquire an IP address via DHCP: connect via SSH using the default credentials. At this point, your device should be reachable through the desired interface. Now refer to the Usage section for normal operation.","title":"3.3 Inital access via WiFi"},{"location":"usage/","text":"Usage Once the set-up is complete you may start communicating with the modem. Ensure you have already connected the transducer then start the modem by executing the startmodem.sh script. The full path to run the main file from the user directory will be /home/modem/moda/dev-toolbox/scripts4trials/startmodem.sh This command will run the test-modem process with the default settings. Most parameters can be conveniently changed by editing the startmodem.sh file. The table below lists them. Modulation-independent parameters Parameter startmodem.sh label Possible values ID (source address) id int [1;15] Carrier frequency carrier int (Hz) Modulation technique modulation flex,janus,flexofdm Output amplifier gain gain float [0.01;0.99] Flexframe-specific parameters (only evaluated when modulation=flex or modulation=ofdmflex) Parameter startmodem.sh label Possible values Modulation flex_psk Listed in Overview Interpolation interpflex int [5;20] Inner FEC scheme intFEC Listed in Overview Outer FEC scheme outFEC Listed in Overview JANUS-specific parameters (only evaluated when modulation=janus) Parameter startmodem.sh label Possible values Bandwidth bandwidth int (Hz) Communication Once the startmodem.sh script is up and running, the modem opens a TCP socket on port 55555 to communicate with the user. You may use netcat to connect to the socket, typing nc <SuM IP address> 55555 Alternatively, the socket can be opened locally: open another SSH terminal and connect to the modem (as in quickstart ) then type nc localhost 55555 Afterwards data can be sent and received through the terminal. Having problems transmitting/receiving data? Take a look at the troubleshooting section. Toggling autostart If you wish the modem to start listening and transmitting to the socket port 55555 automatically after startup you may enable the autostart service by typing sudo systemctl enable sumd.service In order to disable the autostart feature instead type sudo systemctl disable sumd.service","title":"Usage"},{"location":"usage/#usage","text":"Once the set-up is complete you may start communicating with the modem. Ensure you have already connected the transducer then start the modem by executing the startmodem.sh script. The full path to run the main file from the user directory will be /home/modem/moda/dev-toolbox/scripts4trials/startmodem.sh This command will run the test-modem process with the default settings. Most parameters can be conveniently changed by editing the startmodem.sh file. The table below lists them.","title":"Usage"},{"location":"usage/#modulation-independent-parameters","text":"Parameter startmodem.sh label Possible values ID (source address) id int [1;15] Carrier frequency carrier int (Hz) Modulation technique modulation flex,janus,flexofdm Output amplifier gain gain float [0.01;0.99]","title":"Modulation-independent parameters"},{"location":"usage/#flexframe-specific-parameters","text":"(only evaluated when modulation=flex or modulation=ofdmflex) Parameter startmodem.sh label Possible values Modulation flex_psk Listed in Overview Interpolation interpflex int [5;20] Inner FEC scheme intFEC Listed in Overview Outer FEC scheme outFEC Listed in Overview","title":"Flexframe-specific parameters"},{"location":"usage/#janus-specific-parameters","text":"(only evaluated when modulation=janus) Parameter startmodem.sh label Possible values Bandwidth bandwidth int (Hz)","title":"JANUS-specific parameters"},{"location":"usage/#communication","text":"Once the startmodem.sh script is up and running, the modem opens a TCP socket on port 55555 to communicate with the user. You may use netcat to connect to the socket, typing nc <SuM IP address> 55555 Alternatively, the socket can be opened locally: open another SSH terminal and connect to the modem (as in quickstart ) then type nc localhost 55555 Afterwards data can be sent and received through the terminal. Having problems transmitting/receiving data? Take a look at the troubleshooting section.","title":"Communication"},{"location":"usage/#toggling-autostart","text":"If you wish the modem to start listening and transmitting to the socket port 55555 automatically after startup you may enable the autostart service by typing sudo systemctl enable sumd.service In order to disable the autostart feature instead type sudo systemctl disable sumd.service","title":"Toggling autostart"}]}